// Docker Configuration
// Dockerfile
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
WORKDIR /src
COPY ["AgentSystem.csproj", "."]
RUN dotnet restore "./AgentSystem.csproj"
COPY . .
WORKDIR "/src/."
RUN dotnet build "AgentSystem.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "AgentSystem.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "AgentSystem.dll"]

// docker-compose.yml
version: '3.8'

services:
  agent-system:
    image: ${DOCKER_REGISTRY}/agent-system:${VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - AgentSystem__Redis__ConnectionString=redis:6379
      - AgentSystem__SQL__ConnectionString=Server=sql;Database=AgentSystem;User Id=sa;Password=${SQL_PASSWORD}
      - AgentSystem__Monitoring__InstrumentationKey=${APP_INSIGHTS_KEY}
    depends_on:
      - redis
      - sql
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - agent-network
    command: redis-server --appendonly yes

  sql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - "1433:1433"
    environment:
      - SA_PASSWORD=${SQL_PASSWORD}
      - ACCEPT_EULA=Y
    volumes:
      - sql-data:/var/opt/mssql
    networks:
      - agent-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - agent-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - agent-network

networks:
  agent-network:
    driver: bridge

volumes:
  redis-data:
  sql-data:
  prometheus-data:
  grafana-data:

// Kubernetes Manifests
// namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: agent-system

---
// configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-config
  namespace: agent-system
data:
  appsettings.Production.json: |
    {
      "Logging": {
        "LogLevel": {
          "Default": "Information",
          "Microsoft": "Warning"
        }
      },
      "AgentSystem": {
        "MemoryType": "Redis",
        "Monitoring": {
          "Type": "ApplicationInsights"
        },
        "SafetySettings": {
          "ContentFilterEnabled": true,
          "ProhibitedTerms": ["harmful", "dangerous", "illegal"],
          "RestrictedActionTypes": ["DeleteFile", "ModifySystem"]
        }
      }
    }

---
// secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: agent-secrets
  namespace: agent-system
type: Opaque
stringData:
  redis-connection: "redis-service:6379"
  sql-connection: "Server=sql-service;Database=AgentSystem;User Id=sa;Password=${SQL_PASSWORD}"
  app-insights-key: "${APP_INSIGHTS_KEY}"
  weather-api-key: "${WEATHER_API_KEY}"

---
// deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-system
  namespace: agent-system
  labels:
    app: agent-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: agent-system
  template:
    metadata:
      labels:
        app: agent-system
    spec:
      containers:
      - name: agent-system
        image: ${DOCKER_REGISTRY}/agent-system:${VERSION:-latest}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: Production
        - name: AgentSystem__Redis__ConnectionString
          valueFrom:
            secretKeyRef:
              name: agent-secrets
              key: redis-connection
        - name: AgentSystem__SQL__ConnectionString
          valueFrom:
            secretKeyRef:
              name: agent-secrets
              key: sql-connection
        - name: AgentSystem__Monitoring__InstrumentationKey
          valueFrom:
            secretKeyRef:
              name: agent-secrets
              key: app-insights-key
        volumeMounts:
        - name: config
          mountPath: /app/appsettings.Production.json
          subPath: appsettings.Production.json
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: agent-config

---
// service.yaml
apiVersion: v1
kind: Service
metadata:
  name: agent-system-service
  namespace: agent-system
spec:
  selector:
    app: agent-system
  ports:
  - port: 80
    targetPort: http
    name: http
  - port: 443
    targetPort: https
    name: https
  type: LoadBalancer

---
// hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agent-system-hpa
  namespace: agent-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agent-system
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
// ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agent-system-ingress
  namespace: agent-system
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.agentsystem.dev
    secretName: agent-system-tls
  rules:
  - host: api.agentsystem.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: agent-system-service
            port:
              number: 80

---
// redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: agent-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        command:
        - redis-server
        - --appendonly
        - "yes"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
// redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: agent-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
// redis-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: agent-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

// Helm Chart
// Chart.yaml
apiVersion: v2
name: agent-system
description: A Helm chart for Agent System
type: application
version: 1.0.0
appVersion: "1.0.0"

dependencies:
  - name: redis
    version: "~14.8.0"
    repository: "https://charts.bitnami.com/bitnami"
  - name: postgresql
    version: "~10.13.0"
    repository: "https://charts.bitnami.com/bitnami"
    condition: postgresql.enabled

// values.yaml
replicaCount: 3

image:
  repository: your-registry/agent-system
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podSecurityContext: {}
securityContext: {}

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: api.agentsystem.dev
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: agent-system-tls
      hosts:
        - api.agentsystem.dev

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}

redis:
  enabled: true
  auth:
    enabled: false
  cluster:
    enabled: false

postgresql:
  enabled: false
  postgresqlUsername: agentsystem
  postgresqlPassword: changeme
  postgresqlDatabase: agentsystem

config:
  memoryType: "Redis"
  monitoring:
    type: "ApplicationInsights"
    instrumentationKey: ""
  safety:
    contentFilterEnabled: true
    prohibitedTerms:
      - harmful
      - dangerous
      - illegal
    restrictedActionTypes:
      - DeleteFile
      - ModifySystem

secrets:
  weatherApiKey: ""
  appInsightsKey: ""

// GitHub Actions Workflow
// .github/workflows/main.yml
name: Agent System CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

env:
  DOCKER_REGISTRY: your-registry
  IMAGE_NAME: agent-system

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Test
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.cobertura.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v3
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        
        # Update secrets
        kubectl create secret generic agent-secrets \
          --from-literal=redis-connection="${{ secrets.REDIS_CONNECTION }}" \
          --from-literal=sql-connection="${{ secrets.SQL_CONNECTION }}" \
          --from-literal=app-insights-key="${{ secrets.APP_INSIGHTS_KEY }}" \
          --from-literal=weather-api-key="${{ secrets.WEATHER_API_KEY }}" \
          --namespace=agent-system \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy application
        envsubst < k8s/deployment.yaml | kubectl apply -f -
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/agent-system -n agent-system

// Terraform Configuration for Infrastructure
// main.tf
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
  }
}

provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "agent_system" {
  name     = "agent-system-rg"
  location = "East US"
}

resource "azurerm_kubernetes_cluster" "agent_system" {
  name                = "agent-system-aks"
  location            = azurerm_resource_group.agent_system.location
  resource_group_name = azurerm_resource_group.agent_system.name
  dns_prefix          = "agentsystem"

  default_node_pool {
    name       = "default"
    node_count = 3
    vm_size    = "Standard_D2_v2"
  }

  identity {
    type = "SystemAssigned"
  }
}

resource "azurerm_container_registry" "agent_system" {
  name                = "agentsystemcr"
  resource_group_name = azurerm_resource_group.agent_system.name
  location            = azurerm_resource_group.agent_system.location
  sku                 = "Standard"
  admin_enabled       = true
}

resource "azurerm_redis_cache" "agent_system" {
  name                = "agent-system-redis"
  location            = azurerm_resource_group.agent_system.location
  resource_group_name = azurerm_resource_group.agent_system.name
  capacity            = 1
  family              = "C"
  sku_name            = "Standard"
  enable_non_ssl_port = false
}

resource "azurerm_key_vault" "agent_system" {
  name                = "agent-system-kv"
  location            = azurerm_resource_group.agent_system.location
  resource_group_name = azurerm_resource_group.agent_system.name
  tenant_id           = data.azurerm_client_config.current.tenant_id
  sku_name            = "standard"
}

resource "azurerm_application_insights" "agent_system" {
  name                = "agent-system-ai"
  location            = azurerm_resource_group.agent_system.location
  resource_group_name = azurerm_resource_group.agent_system.name
  application_type    = "web"
}

output "kube_config" {
  value     = azurerm_kubernetes_cluster.agent_system.kube_config_raw
  sensitive = true
}

output "acr_login_server" {
  value = azurerm_container_registry.agent_system.login_server
}

output "redis_connection_string" {
  value     = azurerm_redis_cache.agent_system.primary_connection_string
  sensitive = true
}

output "app_insights_key" {
  value     = azurerm_application_insights.agent_system.instrumentation_key
  sensitive = true
}
